# encoding: utf-8
# Программа "Блокнот"

# Класс "Заметка", разновидность базового класса "Запись"
class Memo < Post

  # отдельный конструктор здесь не нужен, т. к. он совпадает с родительским

  def read_from_console
    puts "Новая заметка (все, что пишите до строчки \"end\"):"
    @text = []

    line = nil

    while line != "end" do
      line = STDIN.gets.chomp # Читаю очередную строку и записываю в массив @text
      @text << line
    end

    # Теперь удаляю последний элемент из массива @text – там служебное слово "end"
    @text.pop
  end


  # Массив из трех строк даты создания + все строки (тело) заметки
  def to_strings
    time_string = "Создано: #{@created_at.strftime("%Y.%m.%d, %H:%M:%S")} \n\r \n\r"

    #  добавляю в массив текста в начало строчку времени и возвращаю
    return @text.unshift(time_string)
  end

  def to_db_hash
    # вызываю родительский метод ключевым словом super и к хэшу, который он вернул
    # присоединяю прицепом специфичные для этого класса поля методом Hash#merge
    return super.merge(
        {
            'text' => @text.join('\n\r') # массив строк делаю одной большой строкой, разделенной символами перевода строки
        }
    )
  end

  # загружаю свои поля из хэш массива
  def load_data(data_hash)
    super(data_hash) # сперва дергаю родительский метод для общих полей

    # теперь прописываю свое специфичное поле
    @text = data_hash['text'].split('\n\r')
  end
end

